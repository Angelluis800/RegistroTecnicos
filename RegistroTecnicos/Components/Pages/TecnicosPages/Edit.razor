@page "/Tecnico/Editar/tecnicoid={idTecnico:int}"
@rendermode InteractiveServer
@inject TecnicoService tecnicoservices
@inject TipoTecnicoService tipotecnicosservice
@inject NavigationManager navigation

<PageTitle>Editar T&eacute;cnico</PageTitle>

<EditForm Model="Tecnico" OnValidSubmit="Editar">
    <Toasts class="p-3" Messages="Mensajes" Placement="ToastsPlacement.TopRight" Delay="5000" />
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card shadow-lg">
            @*Header*@
            <div class="card-header text-white text-center">
                <div class="bg-info rounded">
                    <h1>Editar T&eacute;cnico</h1>
                </div>
            </div>
            @*Body*@
            <div class="card-body">
                <div class="col-1">
                    @*Id*@
                    <label class="form-label" for="Id">Id</label>
                    <InputNumber id="Id" class="form-control" readonly @bind-Value="Tecnico.TecnicoId"></InputNumber>
                </div>
                <div class="row">
                    @*Nombre*@
                    <div class="col-3">
                        <label class="form-label" for="Nombres">Nombre</label>
                        <InputText id="Nombres" class="form-control" @bind-Value="Tecnico.Nombres" placeholder="Ej: Jose Pichardo"></InputText>
                        <ValidationMessage For="@(()=>Tecnico.Nombres)"></ValidationMessage>
                    </div>
                    @*SueldoHora*@
                    <div class="col-3">
                        <label class="form-label" for="SueldoHora">SueldoHora</label>
                        <InputNumber id="SueldoHora" class="form-control" @bind-Value="Tecnico.SueldoHora"></InputNumber>
                        <ValidationMessage For="@(()=>Tecnico.SueldoHora)"></ValidationMessage>
                    </div>
                    @*Tipos*@
                    <div class=" col-4">
                        <label class="form-label" for="Tipos">Tipo</label>
                        <InputSelect id="Tipos" class="form-select" @bind-Value="Tecnico.idTipo">
                            <opction value="0">Selecciona un Tipo</opction>
                            @foreach (var tipotecnico in TipoTecnico)
                            {
                                <option value="@tipotecnico.TipoId">@tipotecnico.Descripcion</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(()=> Tecnico.idTipo)"></ValidationMessage>
                    </div>
                </div>

            </div>
            @*Footer*@
            <div class="card-footer">
                <button class="btn btn-outline-success bi bi-pencil-square" type="submit"> Editar </button>
                <button class="btn btn-outline-secondary" type="button" @onclick="Volver">Volver</button>
            </div>
        </div>
    </div>
</EditForm>

@code {

    public Tecnicos? Tecnico { get; set; } = new Tecnicos();
    public List<TipoTecnicos> TipoTecnico = new List<TipoTecnicos>();
    [Parameter] // Poner esto para que en el page pueda recibirlo como parametro
    public int idTecnico { get; set; }
    List<ToastMessage> Mensajes = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        Tecnico = await tecnicoservices.BuscarId(idTecnico);
        TipoTecnico = await tipotecnicosservice.Listar(t => t.TipoId > 0);
    }

    public async Task Editar()
    {
        if (!await Validar())
        {
            var nuevo = await tecnicoservices.Guardar(Tecnico);
            if (nuevo)
            {
                MostrarMensaje(ToastType.Success, $"El técnico {Tecnico.Nombres} ha sido editado correctamente");
                Tecnico = new Tecnicos();
            }
            else
            {
                MostrarMensaje(ToastType.Danger, "El técnico no se ha podido editar correctamente");
            }
        }
        else
        {
            MostrarMensaje(ToastType.Warning, "Ya existe un técnico con este nombre");
        }
    }

    public async Task<bool> Validar()
    {
        var existe = await tecnicoservices.Existe(Tecnico.TecnicoId, Tecnico.Nombres.ToLower());
        return existe;
    }

    public void Volver() => navigation.NavigateTo("/Tecnico/Index");

    private void MostrarMensaje(ToastType toastType, string message)
    {
        Mensajes.Add(CrearMensaje(toastType, message));
    }

    private ToastMessage CrearMensaje(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = message,
        };
}
