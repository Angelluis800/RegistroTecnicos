@page "/Incentivo/Editar/incentivoid={IncentivoId:int}"
@rendermode InteractiveServer
@inject IncentivoService incentivoService
@inject TipoTecnicoService TipoTecnicoService
@inject NavigationManager navigation

<PageTitle>Editar Incentivo</PageTitle>
<EditForm Model="Incentivo" OnValidSubmit="Editar">
    <Toasts class="p-3" Messages="Mensajes" Placement="ToastsPlacement.TopRight" Delay="5000" />
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card shadow-lg">
            @*Header*@
            <div class="card-header text-white text-center">
                <div class="bg-info rounded">
                    <h1>Crear Incentivo</h1>
                </div>
            </div>
            @*Body*@
            <div class="card-body">
                <div class="col-1">
                    @*Id*@
                    <label class="form-label" for="Id">Id</label>
                    <InputNumber id="Id" class="form-control" readonly @bind-Value="Incentivo.IncentivoId"></InputNumber>
                </div>
                <div class="row">
                    @*Descripcion*@
                    <div class="col-3">
                        <label class="form-label" for="Descripcion">Descripci&oacute;n</label>
                        <InputText id="Nombres" class="form-control" @bind-Value="Incentivo.Descripcion" placeholder="Ej: Diseñar Interfaz"></InputText>
                        <ValidationMessage For="@(()=>Incentivo.Descripcion)"></ValidationMessage>
                    </div>
                    @*Tipos*@
                    <div class=" col-4">
                        <label class="form-label" for="Tipos">Tipo</label>
                        <InputSelect id="Tipos" class="form-select" @bind-Value="Incentivo.TipoId">
                            <option value="0">Selecciona un Tipo</option>
                            @foreach (var tipotecnico in TipoTecnico)
                            {
                                <option value="@tipotecnico.TipoId">@tipotecnico.Descripcion</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(()=> Incentivo.TipoId)"></ValidationMessage>
                    </div>
                </div>
            </div>
            @*Footer*@
            <div class="card-footer">
                <button class="btn btn-outline-success" type="submit"> Crear </button>
                <button class="btn btn-outline-secondary" type="button" @onclick="Volver">Volver</button>
            </div>
        </div>
    </div>
</EditForm>

@code {

    public Incentivos? Incentivo { get; set; } = new Incentivos();
    public List<TiposTecnicos> TipoTecnico = new List<TiposTecnicos>();
    [Parameter]
    public int IncentivoId { get; set; } 
    List<ToastMessage> Mensajes = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        Incentivo = await incentivoService.BuscarId(IncentivoId);
        TipoTecnico = await TipoTecnicoService.Listar(t => true);
        Incentivo.Fecha = DateTime.Now.ToString("dd/MM/yyyy"); // Fecha predeterminada
        Incentivo.Monto = 0.1M; // Monto predeterminado La M Indica que el monto es de tipo Decimal
        Incentivo.CantidadServicios = 1; // Cantidad de servicios predeterminada
    }

    public async Task Editar()
    {
        if (!await Validar())
        {
            var nuevo = await incentivoService.Guardar(Incentivo);
            if (nuevo)
            {
                MostrarMensaje(ToastType.Success, $"La Meta {Incentivo.Descripcion} ha Sido Editada Correctamente");
                Incentivo = new Incentivos();
            }
            else
            {
                MostrarMensaje(ToastType.Danger, "La Meta no se ha Podido Editar Correctamente");
            }
        }
        else
        {
            MostrarMensaje(ToastType.Warning, "Ya Existe una Meta con esta Descripción");
        }
    }

    public async Task<bool> Validar()
    {
        var existe = await incentivoService.Existe(Incentivo.IncentivoId, Incentivo.Descripcion);
        return existe;
    }

    public void Volver() => navigation.NavigateTo("/Incentivo/Index");

    private void MostrarMensaje(ToastType toastType, string message)
    {
        Mensajes.Add(CrearMensaje(toastType, message));
    }

    private ToastMessage CrearMensaje(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = message,
        };
}

