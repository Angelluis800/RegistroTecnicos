@page "/Tecnico/Incentivo/Crear/tecnicoid={TecnicoId:int}"
@rendermode InteractiveServer
@inject IncentivoService incentivoService
@inject TecnicoService tecnicoService
@inject NavigationManager navigation

<PageTitle>Crear Incentivo</PageTitle>
<EditForm Model="Incentivo" OnValidSubmit="Guardar">
    <Toasts class="p-3" Messages="Mensajes" Placement="ToastsPlacement.TopRight" Delay="5000" />
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card shadow-lg">
            @*Header*@
            <div class="card-header text-white text-center">
                <div class="bg-info rounded">
                    <h1>Crear Incentivo</h1>
                </div>
            </div>
            @*Body*@
            <div class="card-body">
                <div class="col-1">
                    @*Id*@
                    <label class="form-label" for="Id">Id</label>
                    <InputNumber id="Id" class="form-control" readonly @bind-Value="Incentivo.IncentivoId"></InputNumber>
                </div>
                <div class="row">
                    @*Incentivo*@
                    <div class="col-4">
                        <label class="form-label" for="Incentivos">Incentivos</label>
                        <InputSelect id="Incentivos" class="form-select" @bind-Value="Incentivo.IncentivoId" @oninput="ActualizarDescripcion">
                            <option value="0">Selecciona un Incentivo</option>
                            @foreach (var incentivo in Incentivos)
                            {
                                <option value="@incentivo.IncentivoId">@incentivo.Descripcion</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(()=> Incentivo.IncentivoId)"></ValidationMessage>
                    </div>
                    <div class="row">
                        @*CantidadServicios*@
                        <div class="col-3">
                            <label class="form-label" for="Servicios">Servicios</label>
                            <InputNumber id="Servicios" class="form-control" @bind-Value="Incentivo.CantidadServicios"></InputNumber>
                            <ValidationMessage For="@(()=>Incentivo.CantidadServicios)"></ValidationMessage>
                        </div>
                        @*Monto*@
                        <div class="col-3">
                            <label class="form-label" for="Monto">Monto</label>
                            <InputNumber id="Monto" class="form-control" @bind-Value="Incentivo.Monto"></InputNumber>
                            <ValidationMessage For="@(()=>Incentivo.Monto)"></ValidationMessage>
                        </div>
                        @*Fecha*@
                        <div class="col-3">
                            <label class="form-label" for="Fecha">Fecha</label>
                            <InputText id="Fecha" class="form-control" @bind-Value="Incentivo.Fecha" placeholder="Ej: dd/mm/YYYY"></InputText>
                            <ValidationMessage For="@(()=>Incentivo.Fecha)"></ValidationMessage>
                        </div>   
                    </div>
                </div>
            </div>
            <!-- Footer -->
            <div class="card-footer">
                <button class="btn btn-outline-success" type="submit"> Crear </button>
                <button class="btn btn-outline-secondary" type="button" @onclick="()=>Volver(TecnicoId)">Volver</button>
            </div>
        </div>
    </div>
</EditForm>

@code {

    public List<Incentivos?> Incentivos = new List<Incentivos>();
    public Incentivos Incentivo { get; set; } = new Incentivos();
    public Tecnicos Tecnico { get; set; } = new Tecnicos();
    [Parameter]
    public int TecnicoId { get; set; }
    List<ToastMessage> Mensajes = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        Tecnico = await tecnicoService.BuscarId(TecnicoId);
        // Cargar los incentivos disponibles para el tipo de técnico
        Incentivos = await incentivoService.Listar(i => i.TipoId == Tecnico.idTipo);

        // Asignar el ID del técnico al incentivo
        Incentivo.TecnicoId = TecnicoId;
        Incentivo.Tecnico = Tecnico;
        Incentivo.TipoId = Tecnico.idTipo;
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            // Crear una nueva instancia de Incentivos
            var nuevoIncentivo = new Incentivos
                {
                    Descripcion = Incentivo.Descripcion,
                    TipoId = Incentivo.TipoId,
                    CantidadServicios = Incentivo.CantidadServicios,
                    Monto = Incentivo.Monto,
                    Fecha = Incentivo.Fecha,                    
                    TecnicoId = Incentivo.TecnicoId
                };

            var nuevo = await incentivoService.Guardar(nuevoIncentivo);

            if (nuevo)
            {
                MostrarMensaje(ToastType.Success, $"La Meta {nuevoIncentivo.Descripcion} ha sido Añadida Correctamente");
                Incentivo = new Incentivos();
            }
            else
            {
                MostrarMensaje(ToastType.Danger, "La Meta no se ha Podido Añadir Correctamente");
            }
        }
        else
        {
            MostrarMensaje(ToastType.Warning, "Esta Meta Aún no se ha Completado");
        }
    }

    public async Task<bool> Validar()
    {
        var existe = await incentivoService.Existe(Incentivo.IncentivoId, Incentivo.Descripcion);
        return existe;
    }

    private void ActualizarDescripcion(ChangeEventArgs e)
    {
        var incentivoId = Convert.ToInt32(e.Value);
        var incentivoSeleccionado = Incentivos.FirstOrDefault(i => i.IncentivoId == incentivoId);
        if (incentivoSeleccionado != null)
        {
            Incentivo.Descripcion = incentivoSeleccionado.Descripcion;
        }
    }

    public void Volver(int id) => navigation.NavigateTo($"/Tecnico/Incentivo/Index/tecnico={id}");

    private void MostrarMensaje(ToastType toastType, string message)
    {
        Mensajes.Add(CrearMensaje(toastType, message));
    }

    private ToastMessage CrearMensaje(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = message,
        };
}
